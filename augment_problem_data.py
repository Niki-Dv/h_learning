"""
Script receives:
1) domain.pddl
2) NProbDF - a pandas dataframe that holds paths to N problems and their plans generated from the given domain
3) new_problems_path
The script iterates through the NProbDF dataframe created by the "generate_problem_plans.py" and sends the paths of each
problem and its corresponding plan to the "regenerate_data.py" script that augments data by create all the "mid-way"
problems generated by doing each one of the actions in plan after each plan action generates the problem achieved by
that step. for achieving the goal of problem (assumes plan actions are OK).

Each subproblem created by regenerate data is then added to NProbDF which is then returned to the
"generate_problem_plans.py" script
"""
import regenrate_data
import pandas as pd



def add_subproblems_to_df(idx, df, subproblem_paths, parent_prob_id):
    dfA = df.iloc[:idx+1, ] # above the parent problem line (line included)
    dfB = df.iloc[idx+1:, ] # below the parent problem line
    prob_row = df.iloc[idx, ] # the parent problem line
    df_insert = pd.DataFrame([prob_row]*len(subproblem_paths),columns = df.columns).reset_index(drop = True)
    df_insert["from_id"] = parent_prob_id # stating relation of all subproblems to their parent problem in the dataframe
    df_insert["id"] = "subproblem"  # stating that all rows that will be added to the df are of subproblems
    for i, subprob_path in enumerate(subproblem_paths):
        df_insert.at[i,"problem.pddl"]=subproblem_paths[i]#assigning the subproblem path to each line
    df = dfA.append(df_insert).append(dfB).reset_index(drop = True)
    return df
##############################################################################################
def main(N, domain_file, NProbDF, new_problems_path):

    for i in range(N):
        curr_prob_path = NProbDF.loc[NProbDF['id'] == i]["problem.pddl"].iloc[0]
        curr_plan_path = NProbDF.loc[NProbDF['id'] == i]["plan"].iloc[0]

        subproblem_paths = regenrate_data.main(domain_file, curr_prob_path, curr_plan_path, new_problems_path)
        if len(subproblem_paths) == 0:
            continue
        idx2add_subproblems = NProbDF.index[["id"]==i]
#todo: continue here - integrating "regenrate_data" into this script such that the complete NProbDF is returned
        NProbDF = add_subproblems_to_df(idx2add_subproblems, NProbDF, subproblem_paths, i)
    return NProbDF


##############################################################################################
if __name__ == "__main__":

    if len(sys.argv) != 5:
        print("-E- Usage: " + str(sys.argv[0]),
              "<domain pddl file path> <problem pddl file path> <plan for problem path> "
              "<path for for new problems>")
        sys.exit(1)
    N = sys.argv[1]
    domain_file = sys.argv[2]
    NProbDF = sys.argv[3]
    new_problems_path = sys.argv[4]

    main(N, domain_file, NProbDF, new_problems_path)
